{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { collection, getDocs, where, query, startAfter, limit, orderBy } from \"firebase/firestore\";\nimport db from '../initializers/firebase';\nconst companiesRef = collection(db, \"testcompany\");\nexport const searchParameter = 'codigo';\nexport const useGetItems = () => {\n  _s();\n\n  const [filter, setFilter] = useState('');\n  const [lastValue, setLastValue] = useState('');\n  const [items, setItems] = useState([]);\n\n  const updateLastValue = res => setLastValue(res.docs[res.docs.length - 1]);\n\n  return {\n    onFilterChange: async newFilter => {\n      console.log('calling with new filter', newFilter);\n      const data = await getDataService(newFilter, '', updateLastValue);\n      setFilter(newFilter);\n      setItems(data);\n    },\n    increasePage: async () => {\n      if (lastValue === undefined) return;\n      console.log('calling next Page', lastValue);\n      const data = await getDataService(filter, lastValue, updateLastValue);\n      setItems([...items, ...data]);\n    },\n    items\n  };\n};\n\n_s(useGetItems, \"gzrBvVrxqJla71klVE6pb/nBuyo=\");\n\nconst getDataService = async (filter, lastValue, onSuccess) => {\n  const pageSize = 5;\n  const q = query(companiesRef, where(searchParameter, '>=', filter), where(searchParameter, '<=', filter + '\\uf8ff'), orderBy(searchParameter), startAfter(lastValue), limit(pageSize));\n  const res = await getDocs(q);\n  onSuccess(res);\n  const data = [];\n  res.forEach(doc => data.push(doc.data()));\n  return data;\n};","map":{"version":3,"sources":["C:/Users/hp/Desktop/tuG/src/hooks/Services.js"],"names":["useState","collection","getDocs","where","query","startAfter","limit","orderBy","db","companiesRef","searchParameter","useGetItems","filter","setFilter","lastValue","setLastValue","items","setItems","updateLastValue","res","docs","length","onFilterChange","newFilter","console","log","data","getDataService","increasePage","undefined","onSuccess","pageSize","q","forEach","doc","push"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,UAA5C,EAAwDC,KAAxD,EAA+DC,OAA/D,QAA8E,oBAA9E;AACA,OAAOC,EAAP,MAAe,0BAAf;AAEA,MAAMC,YAAY,GAAGR,UAAU,CAACO,EAAD,EAAK,aAAL,CAA/B;AAEA,OAAO,MAAME,eAAe,GAAG,QAAxB;AAEP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMkB,eAAe,GAAIC,GAAD,IAASJ,YAAY,CAACI,GAAG,CAACC,IAAJ,CAASD,GAAG,CAACC,IAAJ,CAASC,MAAT,GAAgB,CAAzB,CAAD,CAA7C;;AAEA,SAAO;AACHC,IAAAA,cAAc,EAAE,MAAOC,SAAP,IAAqB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,SAAvC;AACA,YAAMG,IAAI,GAAG,MAAMC,cAAc,CAACJ,SAAD,EAAY,EAAZ,EAAgBL,eAAhB,CAAjC;AACAL,MAAAA,SAAS,CAACU,SAAD,CAAT;AACAN,MAAAA,QAAQ,CAACS,IAAD,CAAR;AACH,KANE;AAOHE,IAAAA,YAAY,EAAE,YAAY;AACtB,UAAGd,SAAS,KAAKe,SAAjB,EAA4B;AAC5BL,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCX,SAAjC;AACA,YAAMY,IAAI,GAAG,MAAMC,cAAc,CAAEf,MAAF,EAAUE,SAAV,EAAqBI,eAArB,CAAjC;AACAD,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGU,IAAd,CAAD,CAAR;AACH,KAZE;AAaHV,IAAAA;AAbG,GAAP;AAeH,CArBM;;GAAML,W;;AAuBb,MAAMgB,cAAc,GAAG,OAAOf,MAAP,EAAeE,SAAf,EAA0BgB,SAA1B,KAAwC;AAC3D,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,CAAC,GAAG5B,KAAK,CACXK,YADW,EAEXN,KAAK,CAACO,eAAD,EAAkB,IAAlB,EAAwBE,MAAxB,CAFM,EAGXT,KAAK,CAACO,eAAD,EAAkB,IAAlB,EAAwBE,MAAM,GAAC,QAA/B,CAHM,EAIXL,OAAO,CAACG,eAAD,CAJI,EAKXL,UAAU,CAACS,SAAD,CALC,EAMXR,KAAK,CAACyB,QAAD,CANM,CAAf;AAQA,QAAMZ,GAAG,GAAG,MAAMjB,OAAO,CAAC8B,CAAD,CAAzB;AACAF,EAAAA,SAAS,CAACX,GAAD,CAAT;AACA,QAAMO,IAAI,GAAG,EAAb;AACAP,EAAAA,GAAG,CAACc,OAAJ,CACIC,GAAG,IAAER,IAAI,CAACS,IAAL,CAAUD,GAAG,CAACR,IAAJ,EAAV,CADT;AAGA,SAAOA,IAAP;AACH,CAjBD","sourcesContent":["import { useState } from 'react';\nimport { collection, getDocs, where, query, startAfter, limit, orderBy } from \"firebase/firestore\";\nimport db from '../initializers/firebase';\n\nconst companiesRef = collection(db, \"testcompany\");\n\nexport const searchParameter = 'codigo';\n\nexport const useGetItems = () => {\n    const [filter, setFilter] = useState('');\n    const [lastValue, setLastValue] = useState('');\n    const [items, setItems] = useState([]);\n    const updateLastValue = (res) => setLastValue(res.docs[res.docs.length-1])\n\n    return {\n        onFilterChange: async (newFilter) => {\n            console.log('calling with new filter', newFilter);\n            const data = await getDataService(newFilter, '', updateLastValue)\n            setFilter(newFilter);\n            setItems(data);\n        },\n        increasePage: async () => {\n            if(lastValue === undefined) return;\n            console.log('calling next Page', lastValue);\n            const data = await getDataService( filter, lastValue, updateLastValue);\n            setItems([...items, ...data]);\n        },\n        items\n    }\n}\n\nconst getDataService = async (filter, lastValue, onSuccess) => {\n    const pageSize = 5;\n    const q = query(\n        companiesRef,\n        where(searchParameter, '>=', filter),\n        where(searchParameter, '<=', filter+'\\uf8ff'),\n        orderBy(searchParameter),\n        startAfter(lastValue),\n        limit(pageSize)\n    );\n    const res = await getDocs(q);\n    onSuccess(res);\n    const data = [];\n    res.forEach(\n        doc=>data.push(doc.data())\n    );\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}